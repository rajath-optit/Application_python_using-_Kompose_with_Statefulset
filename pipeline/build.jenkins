pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                script {
                    git branch: 'main',
                        credentialsId: 'bharath',
                        url: 'https://github.com/optit-cloud-team/optit-lab-python-microservice-example.git'
                }
            }
        }
        
        stage('Build and Push Docker Images') {
            steps {
                script {
                    docker.build("raorajath/python-producer:latest", "./producer")
                    docker.build("raorajath/python-consumer-one:latest", "./consumer_one")
                    docker.build("raorajath/python-consumer-two:latest", "./consumer_two")
                    docker.build("raorajath/python-consumer-three:latest", "./consumer_three")
                    docker.build("raorajath/python-consumer-four:latest", "./consumer_four")
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                // Ensure Docker Compose is installed
                sh 'docker-compose --version'
                
                // Deploy the application using Docker Compose
                sh 'docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d'
            }
        }
    }
}
        stage('Docker Publish') {
            steps {
                script {
                    // Docker login using credentials
                    withCredentials([usernamePassword(credentialsId: 'bkdockerid', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"

                        // Define images to push
                        def images = [
                            "raorajath/python-producer:latest",
                            "raorajath/python-consumer-one:latest",
                            "raorajath/python-consumer-two:latest",
                            "raorajath/python-consumer-three:latest",
                            "raorajath/python-consumer-four:latest"
                        ]

                        images.each { imageName ->
                            // Tag and push the image with the build ID
                            def imageNameWithTag = "${imageName.replace(':latest', '')}:${env.BUILD_ID}"
                            sh "docker tag ${imageName} ${imageNameWithTag}"
                            sh "docker push ${imageNameWithTag}"

                            // Tag and push the image as latest
                            def imageNameWithLatest = "${imageName}"
                            sh "docker tag ${imageName} ${imageNameWithLatest}"
                            sh "docker push ${imageNameWithLatest}"
                        }
                    }
                }
            }
        }
    }
}
